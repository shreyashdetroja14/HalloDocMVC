@model HalloDocServices.ViewModels.AdminViewModels.ChatBoxViewModel

<div class="offcanvas offcanvas-end" tabindex="-1" id="chatbox-offcanvas" aria-labelledby="offcanvasExampleLabel">
    <div class="offcanvas-header bg-info text-white">
        <h5 class="offcanvas-title" id="offcanvasExampleLabel">@Model.ReceiverName</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body d-flex flex-column">
        <div class="chat-area flex-grow-1 mb-2 " style="overflow-y: scroll;">
            <ul id="messagesList" class="list-group">
                @* <li class="message list-group-item border rounded mb-2">Hello</li> *@
            </ul>
        </div>
        <div class="message-box d-flex">
            <input type="text" id="receiverId" value="@Model.ReceiverId" hidden>
            <input type="text" id="receiverName" value="@Model.ReceiverName" hidden>
            @* <input type="text" id="senderId" value="@Model.SenderId" hidden> *@
            <input type="text" class="form-control me-2" id="message-input" />
            <button class="btn btn-info text-white" id="sendMessage">Send</button>
        </div>
    </div>
</div>

<script>
    // initialize connection instance
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();


    connection.on("ReceiveMessage", (messageDetails) => {

        console.log(messageDetails);
        const receiverId = document.getElementById("receiverId").value;
        //alert(senderId, "hi", userId);

        //check if the user from which the current message has been received is the one to whom we are chatting
        if (receiverId == messageDetails.senderId) {
            addNewMessageToList(messageDetails.message, messageDetails.sentTime, true);
        }
        else {
            Swal.fire({
                text: `new message from ${messageDetails.senderName}`,
                icon: "info"
            });
        }
    });

    // initialize connection - calls OnConnectedAsync Method on Hub
    connection.start().catch(err => console.error(err.toString()));

    // event listener for send btn
    document.getElementById("sendMessage").addEventListener("click", event => {
        const receiverId = document.getElementById("receiverId").value;
        const receiverName = document.getElementById("receiverName").value;
        const message = document.getElementById("message-input").value;

        const sentTime = "@DateTime.Now";
        console.log(sentTime);
        //calls SendMessage Method on Hub
        connection.invoke("SendMessage", receiverId, receiverName, message, sentTime).catch(err => console.error(err.toString()));

        addNewMessageToList(message, sentTime, false);
        document.getElementById("message-input").value = '';

        event.preventDefault();
    });

    // event listener for offcanvas close btn
    document.getElementById('chatbox-offcanvas').addEventListener('hidden.bs.offcanvas', function () {
        // closes connection - calls OnDisconnectedAsync Method on Hub
        connection.stop();
    });

    // add new message to chat
    function addNewMessageToList(message, sentTime, isReceivedMessage) {
        //const li = document.createElement("li");
        //li.className = "message list-group-item border rounded mb-2";
        //li.textContent = message;
        //document.getElementById("messagesList").appendChild(li);

        const li = document.createElement("li");
        if (isReceivedMessage) {
            li.className = "list-group-item d-flex justify-content-start border-0 p-0 rounded mb-2";
        }
        else {
            li.className = "list-group-item d-flex justify-content-end border-0 p-0 rounded mb-2";
        }

        const messageContainer = document.createElement("div");
        messageContainer.className = isReceivedMessage ? "receiver-message" : "sender-message";

        const messageText = document.createElement("p");
        messageText.className = "mb-2";
        messageText.textContent = message;
        messageContainer.appendChild(messageText);

        const messageMeta = document.createElement("small");
        //messageMeta.textContent = new Date().toLocaleString();
        messageMeta.textContent = sentTime;
        messageContainer.appendChild(messageMeta);

        li.appendChild(messageContainer);
        document.getElementById("messagesList").appendChild(li);
    }

</script>