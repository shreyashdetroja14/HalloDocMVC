@{
    ViewData["Title"] = "Scheduling";
    Layout = "~/Views/Shared/_AdminDashboardLayout.cshtml";
}
@using HalloDocServices.ViewModels.AdminViewModels
@model HalloDocServices.ViewModels.AdminViewModels.SchedulingViewModel

@{
    CreateShiftViewModel CreateShiftData = Model.CreateShiftData;
}

@section AddStyles{
    <!-- FullCalendar CSS -->
    <link href="https://unpkg.com/fullcalendar@5.10.1/main.min.css" rel="stylesheet" />
    <!-- FullCalendar Scheduler CSS -->
    <link href="https://unpkg.com/fullcalendar-scheduler@5.10.1/main.min.css" rel="stylesheet" />

    <style>
        .btn-shadow {
            box-shadow: 1px 1px 2px 1px rgba(0,0,0,0.4);
        }

        .active-calendar-tab {
            background-color: #0dcaf0;
            color: #fff;
        }
    </style>
}

<div class="main">
    @*<partial name="_NavbarLinks">*@

    <div class="container-xl p-4">
        <h2 class="mb-4">Scheduling</h2>

        <div class="bg-body rounded-3 p-4 custom-shadow">
            @if (!Model.IsPhysician)
            {
                <div class="search-area d-flex flex-column flex-md-row justify-content-between align-items-center mb-4">
                    <select class="form-select mb-3 mb-md-0" id="region-list" style="width: 270px;" asp-for="RegionId" asp-items="@Model.RegionList">
                        <option value="">All Regions</option>
                    </select>
                    <div class="d-flex">
                        <a asp-action="MDsOnCall" class="btn btn-info text-white me-2 btn-shadow">Providers On Call</a>
                        <a asp-action="RequestedShifts" class="btn btn-info text-white me-2 btn-shadow">Shifts For Review</a>
                        <button type="button" class="btn btn-info text-white btn-shadow" data-bs-toggle="modal" data-bs-target="#create-shift-modal">Add Shift</button>
                    </div>
                </div>
            }

            @if (Model.IsPhysician)
            {
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-info text-white btn-shadow" data-bs-toggle="modal" data-bs-target="#create-shift-modal">Create Shift</button>
                </div>
            }


            <h5 class="mb-3" id="calendar-title"></h5>
            <div class="d-flex justify-content-end mb-3">
                <div class="d-flex align-items-center me-2">
                    <div style="width:4rem; height:2rem; background-color: #d6338440; border: 1px solid #d63384;" class="d-inline-block me-2 rounded-3"></div>
                    <span>Pending Shifts</span>
                </div>
                <div class="d-flex align-items-center">
                    <div style="width:4rem; height:2rem; background-color: #19875440; border: 1px solid #198754;" class="d-inline-block me-2 rounded-3"></div>
                    <span>Approved Shifts</span>
                </div>
            </div>
            <div class="d-flex flex-column flex-md-row  justify-content-between">
                <div class="d-flex align-items-center mb-3">
                    <button id="prev" class="btn material-symbols-outlined p-2 rounded-circle bg-info text-white text-center fs-6">
                        arrow_back
                    </button>
                    <span class="material-symbols-outlined text-secondary mx-2">
                        calendar_month
                    </span>
                    <span id="next" class="btn material-symbols-outlined p-2 rounded-circle bg-info text-white text-center fs-6">
                        arrow_forward
                    </span>
                </div>
                @if (!Model.IsPhysician)
                {
                    <div class="mb-3">
                        <button id="day" class="btn btn-outline-info calendar-tab">Day</button>
                        <button id="week" class="btn btn-outline-info calendar-tab">Week</button>
                        <button id="month" class="btn btn-outline-info calendar-tab active-calendar-tab">Month</button>
                    </div>
                }
            </div>
            <div id="calendar" class="bg-body-tertiary "></div>
        </div>


    </div>
</div>

<div class="modal fade" data-bs-backdrop="static" id="create-shift-modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3">
            <div class="modal-header fw-bold bg-info text-white">
                <h1 class="modal-title fs-5 " id="modaltitle">Create Shift</h1>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div id="createShiftError"></div>

                <form asp-action="CreateShift" id="create-shift-form">
                    <div class="form-floating mb-3">
                        @if (Model.IsPhysician)
                        {
                            <select class="form-select" asp-for="CreateShiftData.RegionId" asp-items="CreateShiftData.RegionList">
                                <option value="">Select Region</option>
                            </select>
                        }
                        else
                        {
                            <select class="form-select" id="modal-region-list" asp-for="CreateShiftData.RegionId" asp-items="CreateShiftData.RegionList">
                                <option value="">Select Region</option>
                            </select>
                        }
                        <label for="modal-region-list">Regions</label>
                        <span class="text-danger" asp-validation-for="CreateShiftData.RegionId"></span>
                    </div>

                    @if (!Model.IsPhysician)
                    {
                        <div class="form-floating mb-3">
                            <select class="form-select selectlist" id="modal-physician-list" asp-for="CreateShiftData.PhysicianId" asp-items="CreateShiftData.PhysicianList">
                                <option value="">Select Physician</option>
                            </select>
                            <label for="modal-physician-list">Physicians</label>
                            <span class="text-danger" asp-validation-for="CreateShiftData.PhysicianId"></span>
                        </div>
                    }
                    @if (Model.IsPhysician)
                    {
                        <input type="number" asp-for="CreateShiftData.PhysicianId" hidden />
                    }

                    <div class="form-floating mb-3">
                        <input type="date" asp-for="CreateShiftData.ShiftDate" class="form-control" id="ShiftDate" placeholder="Shift Date" min="@(DateOnly.FromDateTime(DateTime.Now).ToString("yyyy-MM-dd"))">
                        <label for="ShiftDate">Shift Date</label>
                        <span class="text-danger" asp-validation-for="CreateShiftData.ShiftDate"></span>
                    </div>

                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-floating mb-3">
                                <input type="time" asp-for="CreateShiftData.StartTime" class="form-control" id="StartTime" placeholder="Start Time">
                                <label for="StartTime">Start Time</label>
                                <span class="text-danger" asp-validation-for="CreateShiftData.StartTime"></span>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-floating mb-3">
                                <input type="time" asp-for="CreateShiftData.EndTime" class="form-control" id="EndTime" placeholder="End Time">
                                <label for="EndTime">End Time</label>
                                <span class="text-danger" asp-validation-for="CreateShiftData.EndTime"></span>
                            </div>
                            <div id="timeError" style="color: red; display: none;" class="mb-3">End time must be later than start time.</div>
                        </div>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input type="checkbox" asp-for="CreateShiftData.IsRepeat" class="form-check-input" role="switch" id="IsRepeat">
                        <label class="form-check-label" for="IsRepeat">Repeat</label>
                        <span class="text-danger" asp-validation-for="CreateShiftData.IsRepeat"></span>
                    </div>
                    <div id="repeat">
                        <div class="mb-3" id="select-repeat-days">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value="1"
                                       id="sunday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="sunday">
                                    Every Sunday
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value="2"
                                       id="monday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="monday">
                                    Every Monday
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value="3"
                                       id="tuesday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="tuesday">
                                    Every Tuesday
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value="4"
                                       id="wednesday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="wednesday">
                                    Every Wednesday
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value="5"
                                       id="thrusday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="thrusday">
                                    Every Thrusday
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value="6"
                                       id="friday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="friday">
                                    Every Friday
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input "
                                       type="checkbox"
                                       value="7"
                                       id="saturday"
                                       name="CreateShiftData.RepeatDays">
                                <label class="form-check-label" for="saturday">
                                    Every Saturday
                                </label>
                            </div>
                        </div>

                        <div class="form-floating mb-3">
                            <select class="form-select selectlist" id="RepeatUptoList" asp-for="CreateShiftData.RepeatUpto">
                                <option value="1">1-times</option>
                                <option value="2">2-times</option>
                                <option value="3">3-times</option>
                            </select>
                            <label for="RepeatUptoList">Repeat Upto</label>
                            <span class="text-danger" asp-validation-for="CreateShiftData.RepeatUpto"></span>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-info text-white" id="create-shift">Create</button>
                        <button type="button" class="btn btn-outline-info ms-3" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="modal-container">
</div>

@section AddScript
    {

    <partial name="_ToastMessageScriptsPartial" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    @*<script src='https://cdn.jsdelivr.net/npm/fullcalendar/index.global.min.js'></script>*@

    <!-- FullCalendar JavaScript -->
    <script src="https://unpkg.com/fullcalendar@5.10.1/main.min.js"></script>
    <!-- FullCalendar Scheduler JavaScript -->
    <script src="https://unpkg.com/fullcalendar-scheduler@5.10.1/main.min.js"></script>

    <script>
        $(document).ready(function () {

            //start - end time validation

            function validateTimes() {
                var startTime = $('#StartTime').val();
                var endTime = $('#EndTime').val();

                var startTimeObj = new Date("1970-01-01T" + startTime + ":00");
                var endTimeObj = new Date("1970-01-01T" + endTime + ":00");

                if (endTimeObj <= startTimeObj) {
                    $('#create-shift').prop('disabled', true);
                    $('#timeError').show();
                } else {
                    $('#create-shift').prop('disabled', false);
                    $('#timeError').hide();
                }
            }

            $('#StartTime').change(function () {
                var startTime = $(this).val();
                $('#EndTime').attr('min', startTime);
                validateTimes();
            });

            $('#EndTime').change(validateTimes);


            //start -end time validation for VIEW SHIFT

            //start - end time validation

            function validateTimesView() {
                var startTime = $('#ViewStartTime').val();
                var endTime = $('#ViewEndTime').val();

                var startTimeObj = new Date("1970-01-01T" + startTime + ":00");
                var endTimeObj = new Date("1970-01-01T" + endTime + ":00");

                if (endTimeObj <= startTimeObj) {
                    $('#edit-shift').prop('disabled', true);
                    $('#viewTimeError').show();
                } else {
                    $('#edit-shift').prop('disabled', false);
                    console.log('save btn enabled');
                    $('#viewTimeError').hide();
                }
                console.log('func running')
            }




            // repeat switch toggle

            $('#repeat').hide();

            $('#IsRepeat').change(function () {
                if ($('#IsRepeat').prop('checked')) {
                    $('#repeat').show();
                }
                else {
                    $('#repeat').hide();
                }
            });


            // calendar

            const calendarEl = $('#calendar')[0];

            // calendar initialize

            var calendar = new FullCalendar.Calendar(calendarEl, {

                height: 'auto',
                dayMaxEvents: 4,
                headerToolbar: false,
                navLinks: true,
                eventDisplay: 'Block',
                datesSet: function (info) {
                    var title = info.view.title;
                    $("#calendar-title").html(title);
                },
                schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source', // Required for resourceTimeline views
                views: {
                    resourceTimelineWeek: {
                        slotDuration: { days: 1 },
                        slotLabelInterval: { days: 1 },
                        slotMinTime: '00:00:00',
                        slotMaxTime: '23:59:59',
                        slotLabelFormat: {
                            omitWeekday: false,
                            weekday: 'short',
                            day: '2-digit',
                            omitCommas: true,
                            meridiem: 'short'
                        }
                    },
                    dayGridMonth: {
                        eventLimit: true
                    }
                },
                eventClick: function (info) {
                    console.log(info);
                    const eventId = info.event.id;
                    console.log('event clicked: ', eventId);

                    ViewShift(eventId);
                },
                //resourceLabelDidMount: function (resourceObj) {
                //    const img = document.createElement('img');
                //    const imgUrl = `/Upload/Physician/${resourceObj.el.dataset.resourceId}/ProfilePhoto.jpg`;
                //    img.src = imgUrl;
                //    console.log(imgUrl);
                //    img.style.maxHeight = '30px';
                //    img.style.maxWidth= '30px';
                //    img.style.marginLeft = "8px";
                //    resourceObj.el.querySelector('.fc-datagrid-cell-main').appendChild(img);
                //},
            });

            // calendar toggle buttons

            $("#next").click(function () {
                calendar.next();
            });

            $("#prev").click(function () {
                calendar.prev();
            });

            $("#day").click(function () {
                //if ($(window).width() < 768) {
                //    calendar.changeView('timeGridDay');
                //}
                //else {
                //    calendar.changeView('resourceTimelineDay');
                //}
                calendar.changeView('resourceTimelineDay');
            });

            $("#week").click(function () {
                calendar.changeView('resourceTimelineWeek');

            });

            $("#month").click(function () {
                calendar.changeView('dayGridMonth');
            });

            $('.calendar-tab').each(function () {
                $(this).click(function () {
                    $('.calendar-tab').each(function () {
                        $(this).removeClass('active-calendar-tab');
                    });
                    $(this).addClass('active-calendar-tab');
                });
            });


            calendar.render();


            //region filter for shifts

            $('#region-list').change(function () {
                console.log('region: ', $('#region-list').val());
                GetEventResources();
            });


            // resource event ajax call function

            function GetEventResources() {
                $.ajax({
                    url: '/Providers/GetEventResources',
                    data: {
                        regionId: $('#region-list').val(),
                    },
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        console.log(data.resources);
                        console.log(data.events);

                        const resources = data.resources.map(item => ({
                            id: item.physicianId,
                            title: item.physicianName
                        }));

                        const events = data.events.map(item => ({
                            id: item.shiftDetailId,
                            resourceId: item.physicianId,
                            title: item.physicianName,
                            start: item.shiftDate + 'T' + item.startTime + ':00',
                            end: item.shiftDate + 'T' + item.endTime + ':00',
                            backgroundColor: item.isApproved ? '#198754' : '#d63384',
                            color: item.isApproved ? '#198754' : '#d63384',
                            
                        }));

                        console.log(resources);
                        console.log(events);

                        calendar.setOption('resources', resources);
                        calendar.setOption('events', events);


                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Error fetching data:", textStatus);
                        if (errorThrown) {
                            console.error("Specific error:", errorThrown);
                        }
                        console.error("HTTP status code:", jqXHR.status);

                        if (jqXHR.responseJSON.status == 414) {
                            window.location.href = '/Login';
                        }
                    }
                });
            }

            GetEventResources();

            // view shift modal data ajax call function

            function ViewShift(eventId) {
                $.ajax({
                    url: '/Providers/ViewShift',
                    data: {
                        shiftDetailId: eventId,
                    },
                    type: 'GET',
                    success: function (data) {
                        //console.log(data);
                        $('#modal-container').html(data);

                        viewShiftEventListeners();

                        $('#view-shift-modal').modal('show');


                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Error fetching data:", textStatus);
                        if (errorThrown) {
                            console.error("Specific error:", errorThrown);
                        }
                        console.error("HTTP status code:", jqXHR.status);

                        if (jqXHR.responseJSON.status == 414) {
                            window.location.href = '/Login';
                        }
                    }
                });
            }


            // create shift modal

            //region filter for physicians

            $('#modal-region-list').change(function () {
                console.log('region changed: ', $('#modal-region-list').val());
                $.ajax({
                    url: '/Providers/GetPhysicianSelectList',
                    data: {
                        regionId: $('#modal-region-list').val(),
                    },
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        console.log(data);

                        let options = '<option value="" selected>Select Physician</option>';
                        data.forEach(physician => {
                            options += `<option value="${physician.value}">${physician.text}</option>`;
                        });

                        console.log(options);

                        $('#modal-physician-list').html(options);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Error fetching data:", textStatus);
                        if (errorThrown) {
                            console.error("Specific error:", errorThrown);
                        }
                        console.error("HTTP status code:", jqXHR.status);

                        if (jqXHR.responseJSON.status == 414) {
                            window.location.href = '/Login';
                        }
                    }
                });
            });

            $('#create-shift').click(function (event) {
                console.log('submit btn clicked');
                $('div').remove('#alert-shift');

                const isValid = $('#create-shift-form').valid();
                console.log('isValid: ', isValid);
                console.log('form validated');

                if (isValid) {

                    var formData = $("#create-shift-form").serialize();

                    $.ajax({
                        url: '/Providers/CheckAvailableShift',
                        data: formData,
                        type: 'POST',
                        success: function (data) {
                            if (data.status == true) {
                                $('#create-shift-form').submit();
                            }
                            else {
                                const appendAlert = (message, type) => {
                                    const alertPlaceholder = document.getElementById('createShiftError');
                                    const wrapper = document.createElement('div');
                                    wrapper.innerHTML = [
                                        `<div class="alert alert-${type} alert-dismissible" role="alert" id="alert-shift">`,
                                        `   <div>${message}</div>`,
                                        '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                                        '</div>'
                                    ].join('');

                                    alertPlaceholder.append(wrapper);
                                }

                                appendAlert('Physician unavailable during this time', 'danger');
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error("Error fetching data:", textStatus);
                            if (errorThrown) {
                                console.error("Specific error:", errorThrown);
                            }
                            console.error("HTTP status code:", jqXHR.status);

                            if (jqXHR.responseJSON.status == 414) {
                                window.location.href = '/Login';
                            }
                        }
                    });
                }
                console.log('form submitted');
            });


            // event listners for view shift partial

            function viewShiftEventListeners() {

                $('#cancel-btn').hide();
                $('#edit-shift').hide();
                $('.view-shift').each(function () {
                    $(this).prop('disabled', true);
                });

                $('#edit-btn').click(function () {
                    $('#cancel-btn').show();
                    $('#edit-shift').show();

                    $('.view-shift').each(function () {
                        $(this).prop('disabled', false);
                    });

                    $(this).hide();
                });

                $('#cancel-btn').click(function () {
                    $('#edit-btn').show();
                    $('.view-shift').each(function () {
                        $(this).prop('disabled', true);
                    });

                    $('#edit-shift').hide();
                    $(this).hide();
                });

                $('#ViewStartTime').change(function () {
                    var startTime = $(this).val();
                    $('#ViewEndTime').attr('min', startTime);
                    console.log()
                    validateTimesView($(this).val());
                });

                $('#ViewEndTime').change(validateTimesView);

                $('#edit-shift').click(function (event) {
                    console.log('save btn clicked');
                    $('div').remove('#alert-edit-shift');

                    const isValid = $('#edit-shift-form').valid();
                    console.log('isValid: ', isValid);
                    console.log('form validated');

                    if (isValid) {

                        var formData = $("#edit-shift-form").serialize();

                        $.ajax({
                            url: '/Providers/CheckAvailableShift',
                            data: formData,
                            type: 'POST',
                            success: function (data) {
                                if (data.status == true) {

                                    $('#edit-shift-form').attr('action', '/Providers/EditShift');
                                    $('#edit-shift-form').attr('method', 'post');
                                    $('#edit-shift-form').submit();
                                }
                                else {
                                    const appendAlert = (message, type) => {
                                        const alertPlaceholder = document.getElementById('editShiftError');
                                        const wrapper = document.createElement('div');
                                        wrapper.innerHTML = [
                                            `<div class="alert alert-${type} alert-dismissible" role="alert" id="alert-edit-shift">`,
                                            `   <div>${message}</div>`,
                                            '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                                            '</div>'
                                        ].join('');

                                        alertPlaceholder.append(wrapper);
                                    }

                                    appendAlert('Physician Unavailable during this time', 'danger');
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.error("Error fetching data:", textStatus);
                                if (errorThrown) {
                                    console.error("Specific error:", errorThrown);
                                }
                                console.error("HTTP status code:", jqXHR.status);

                                if (jqXHR.responseJSON.status == 414) {
                                    window.location.href = '/Login';
                                }
                            }
                        });
                    }
                    console.log('form submitted');
                });

                $('#return-shift').click(function (event) {
                    $('#edit-shift-form').attr('action', '/Providers/ReturnShift');
                    $('#edit-shift-form').attr('method', 'post');
                    $('#edit-shift-form').submit();
                });

                $('#delete-shift').click(function (event) {
                    $('#edit-shift-form').attr('action', '/Providers/DeleteShift');
                    $('#edit-shift-form').attr('method', 'post');
                    $('#edit-shift-form').submit();
                });

            }
        });

    </script>



    <script>

        //document.addEventListener('DOMContentLoaded', function () {
        //    const calendarEl = document.getElementById('calendar');

        //    var calendar = new FullCalendar.Calendar(calendarEl, {
        //        initialView: 'resourceTimeline', // Use a timeline view to display resources
        //        height: 'auto',
        //        //headerToolbar: {
        //        //    left: 'prev today next',
        //        //    center: 'title',
        //        //    right: 'resourceTimelineDay resourceTimelineWeek dayGridMonth'
        //        //},
        //        headerToolbar: false,
        //        navLinks: true,
        //        resources: [
        //            { id: 'a', title: 'Room A' },
        //            { id: 'b', title: 'Room B' },
        //            { id: 'c', title: 'Room C' }
        //        ],
        //        events: [
        //            { id: '1', resourceId: 'a', title: 'Meeting 1', start: '2024-04-03T08:00:00', end: '2024-04-03T10:00:00' },
        //            { id: '2', resourceId: 'b', title: 'Meeting 2', start: '2024-04-03T09:00:00', end: '2024-04-03T11:00:00' },
        //            { id: '3', resourceId: 'c', title: 'Meeting 3', start: '2024-04-03T10:00:00', end: '2024-04-03T12:00:00' },
        //            { id: '4', resourceId: 'a', title: 'Meeting 1', start: '2024-04-03T08:00:00', end: '2024-04-03T10:00:00' },
        //            { id: '5', resourceId: 'b', title: 'Meeting 2', start: '2024-04-03T09:00:00', end: '2024-04-03T11:00:00' },
        //            { id: '6', resourceId: 'a', title: 'Meeting 1', start: '2024-04-03T08:00:00', end: '2024-04-03T10:00:00' },
        //            { id: '7', resourceId: 'b', title: 'Meeting 2', start: '2024-04-03T09:00:00', end: '2024-04-03T11:00:00' },
        //        ],

        //        schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source', // Required for resourceTimeline views
        //        views: {
        //            resourceTimelineWeek: {
        //                slotDuration: { days: 1 },
        //                slotLabelFormat: { weekday: 'short', day: 'numeric', week: 'long' }
        //            },
        //            dayGridMonth: {
        //                eventLimit: true
        //            }
        //        },
        //    });

        //    calendar.render();

        //})

    </script>

}