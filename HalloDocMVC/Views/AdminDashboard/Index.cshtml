
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_AdminDashboardLayout.cshtml";
}

@section AddStyles{

    <link href="@Url.Content("~/css/admindashboard.css")" rel="stylesheet" type="text/css" />
    
}

@model HalloDocServices.ViewModels.AdminViewModels.AdminDashboardViewModel

<div class="main">

    <partial name="_NavbarLinks" ></partial>

    <div class="container-fluid p-4">
        
            <div class="row request-status-tabs mb-3">
                <div class="col-12 col-lg-6">
                    <div class="row">
                        <div class="col-4 py-3 px-2">
                            <div class="bg-info py-4">
                                <div class="fw-bold">
                                    NEW
                                </div>
                                <div class="fs-4 fw-bold">
                                    1234
                                </div>
                            </div>
                        </div>
                        <div class="col-4 py-3 px-2">
                            <div class="bg-info py-4">
                                <div class="fw-bold">
                                    NEW
                                </div>
                                <div class="fs-4 fw-bold">
                                    1234
                                </div>
                            </div>
                        </div>
                        <div class="col-4 py-3 px-2">
                            <div class="bg-info py-4">
                                <div class="fw-bold">
                                    NEW
                                </div>
                                <div class="fs-4 fw-bold">
                                    1234
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-6">
                    <div class="row">
                        <div class="col-4 py-3 px-2">
                            <div class="bg-info py-4">
                                <div class="fw-bold">
                                    NEW
                                </div>
                                <div class="fs-4 fw-bold">
                                    1234
                                </div>
                            </div>
                        </div>
                        <div class="col-4 py-3 px-2">
                            <div class="bg-info py-4">
                                <div class="fw-bold">
                                    NEW
                                </div>
                                <div class="fs-4 fw-bold">
                                    1234
                                </div>
                            </div>
                        </div>
                        <div class="col-4 py-3 px-2">
                            <div class="bg-info py-4">
                                <div class="fw-bold">
                                    NEW
                                </div>
                                <div class="fs-4 fw-bold">
                                    1234
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        

        <div class="utility-bar d-flex justify-content-between mb-3">
            <p class="h4">Patients <span>(New)</span></p>
            <div class="utility-buttons">
                <button class="btn btn-info text-white">
                    <img src="~/images/sendIcon.svg" />
                    <span class="d-none d-lg-inline">Send Link</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/documentIcon.svg" />
                    <span class="d-none d-lg-inline">Create Requests</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/exportIcon.svg" />
                    <span class="d-none d-lg-inline">Export</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/exportAllIcon.svg" />
                    <span class="d-none d-lg-inline">Export All</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/doctorIconWhite.svg" />
                    <span class="d-none d-lg-inline">Request Support</span>
                </button>
            </div>
        </div>

        <div class="request-table rounded-3">
            <div class="search-filter-bar d-flex flex-column flex-lg-row justify-content-lg-between bg-white p-3">
                <div class="d-flex flex-column flex-md-row">
                    <input type="text" class="form-control searchbar me-2 mb-2" placeholder="&#128269; Search Patient" />
                    <select class="form-select selectlist me-2 mb-2">
                        <option selected disabled>Search by Region</option>
                        <option value="0">All Regions</option>
                        <option value="1">Gujarat</option>
                        <option value="2">Maharashtra</option>
                        <option value="3">Madhya Pradesh</option>
                        <option value="4">Uttar Pradesh</option>
                        <option value="5">Rajasthan</option>
                    </select>
                </div>

                <div class="request-type-buttons d-flex justify-content-end">
                    <button class="all-btn btn border px-3">All</button>
                    <button class="patient-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <i class="bi bi-circle-fill me-1" style="color: #00b33c"></i>
                        <span>Patient</span>
                    </button>
                    <button class="family-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <i class="bi bi-circle-fill me-1" style="color: #ff9933"></i>
                        <span>Family</span>
                     </button>
                    <button class="business-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <i class="bi bi-circle-fill me-1" style="color: #ffb3cc"></i>
                        <span>Business</span>
                    </button>
                    <button class="concierge-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <i class="bi bi-circle-fill me-1" style="color: #66a3ff"></i>
                        <span>Concierge</span>
                    </button>
                </div>
            </div>
            <div class="requests" id="requests">
                
            </div>
        </div>
    </div>
</div>




@section AddScript
{
    <script>

        //window.addEventListener("pageshow", function (event) {
        //    var historyTraversal = event.persisted ||
        //        (typeof window.performance != "undefined" &&
        //            window.performance.navigation.type === 2);
        //    if (historyTraversal) {
        //        // Handle page restore.
        //        window.location.reload();
        //    }
        //});

        //on body load, call partial view

        document.addEventListener("DOMContentLoaded", async () => {
            let requestStatus = 1;
            if(localStorage.status){
                requestStatus = localStorage.status;
            }
            else
            {
                localStorage.status = requestStatus;
            }
            console.log(requestStatus);

            await GetPartialViewData(requestStatus);
            console.log("DOM is loaded and ready!");
        });

        // validate cookie
        async function ValidateCookie(){
            try{
                //cookie validate url
                const validationurl = "/Login/ValidateCookie";

                
                const validateResponse = await fetch(validationurl);
                
                console.log(validateResponse);
                console.log(validateResponse.statusText, validateResponse.status);
                if (!validateResponse.ok) {
                    console.log('invalid cookiee');

                    

                    if (validateResponse.status === 401) {
                        console.log('Unauthorized access, redirecting to login');
                        window.location.reload();
                        
                    } else {
                        throw new Error(`Something else! `);
                    }

                    return false;
                }

                return true;
            }
            catch(error){
                console.error('HTTP VALIDATION error: ', error);
                return false;
            }
        }



        // requests partial view data ajax call

        async function GetPartialViewData(requestStatus, requestType = null, searchPattern = null, searchRegion = null){
            try {
                
                const isCookieValid = await ValidateCookie();
                console.log(isCookieValid);

                if(isCookieValid){

                    let url = `/AdminDashBoard/FetchRequests?requestStatus=${requestStatus}`;

                    if (requestType) {
                        url += `&requestType=${requestType}`;
                    }

                    if (searchPattern) {
                        url += `&searchPattern=${encodeURIComponent(searchPattern)}`; 
                    }

                    if (searchRegion) {
                        url += `&searchRegion=${encodeURIComponent(searchRegion)}`; 
                    }

                    const response = await fetch(url);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                        
                    }
                    
                    console.log(response);
                    console.log('response is ok');

                    const partialViewHtml = await response.text();
                    //console.log(partialViewHtml);

                    const partialViewContainer = document.getElementById('requests');
                    partialViewContainer.innerHTML = partialViewHtml;

                    addEventListnersForPartial();
                }
                
            } catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }


        // cancel case modal data ajax call

        async function GetCancelCaseModalData(requestId) {

            try {

                const isCookieValid = await ValidateCookie();
                if(isCookieValid){
                    
                    let url = `/AdminDashBoard/CancelCase?requestId=${requestId}`;
                    const response = await fetch(url);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const cancelCaseModalHtml = await response.text();
                    const modalContainer = document.getElementById('modal-container');
                    modalContainer.innerHTML = cancelCaseModalHtml;
                }
            } 
            catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }

        async function GetAssignCaseModalData(requestId, isTransferRequest = null, regionId = 0) {

            try {

                const isCookieValid = await ValidateCookie();
                if (isCookieValid) {
                    
                    let url = `/AdminDashBoard/AssignCase?requestId=${requestId}&isTransferRequest=${isTransferRequest}&regionId=${regionId}`;
                    const response = await fetch(url);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const assignCaseModalHtml = await response.text();
                    const modalContainer = document.getElementById('modal-container');
                    modalContainer.innerHTML = assignCaseModalHtml;

                    const myModal = new bootstrap.Modal('#assign-case-modal')
                    myModal.show();

                    const regionSelectList = document.querySelector('.region-select');
                    regionSelectList.addEventListener('change', async () => {
                        const regionId = regionSelectList.value;
                        console.log('region value:: ', regionId);
                        console.log('request id:: ', requestId);
                        console.log('transfer req:: ', isTransferRequest);

                        myModal.hide();
                        await GetAssignCaseModalData(requestId, isTransferRequest, regionId);
                    });
                }
                

            } 
            catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }

        async function GetBlockRequestModalData(requestId) {

            try {

                const isCookieValid = await ValidateCookie();
                if (isCookieValid) {

                    let url = `/AdminDashBoard/BlockRequest?requestId=${requestId}`;
                    const response = await fetch(url);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const blockRequestModalHtml = await response.text();
                    const modalContainer = document.getElementById('modal-container');
                    modalContainer.innerHTML = blockRequestModalHtml;
                }

            } 
            catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }

        async function GetClearCaseModalData(requestId) {

            try {

                const isCookieValid = await ValidateCookie();
                if (isCookieValid) {
                    let url = `/AdminDashBoard/ClearCase?requestId=${requestId}`;

                    const response = await fetch(url);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const clearCaseModalHtml = await response.text();
                    const modalContainer = document.getElementById('modal-container');
                    modalContainer.innerHTML = clearCaseModalHtml;
                }
            } 
            catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }

        async function GetSendAgreementModalData(requestId) {

            try {

                const isCookieValid = await ValidateCookie();
                if (isCookieValid) {

                    let url = `/AdminDashBoard/SendAgreement?requestId=${requestId}`;

                    const response = await fetch(url);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const sendAgreementModalHtml = await response.text();
                    const modalContainer = document.getElementById('modal-container');
                    modalContainer.innerHTML = sendAgreementModalHtml;

                }
            } 
            catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }

        const urlparams = {
            requestStatus: 1,
            requestType: null,
            searchPattern: null,
            searchRegion: null,
        }

        //request status buttons
        
        const newBtns = document.querySelectorAll('.new');

        newBtns.forEach(btn => {
            btn.addEventListener('click',async () => {
                localStorage.status = 1;
                urlparams.requestStatus = 1;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);

            });
        });

        const pendingBtns = document.querySelectorAll('.pending');

        pendingBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                localStorage.status = 2;
                urlparams.requestStatus = 2;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const activeeBtns = document.querySelectorAll('.activee');

        activeeBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                localStorage.status = 3;
                urlparams.requestStatus = 3;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const concludeBtns = document.querySelectorAll('.conclude');

        concludeBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                localStorage.status = 4;
                urlparams.requestStatus = 4;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const toCloseBtns = document.querySelectorAll('.to-close');

        toCloseBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                localStorage.status = 5;
                urlparams.requestStatus = 5;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const unpaidBtns = document.querySelectorAll('.unpaid');

        unpaidBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                localStorage.status = 6;
                urlparams.requestStatus = 6;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });


        // request type buttons

        const allBtn = document.querySelector('.all-btn');
        allBtn.addEventListener('click', async () => {
            urlparams.requestType = null;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const patientBtn = document.querySelector('.patient-btn');
        patientBtn.addEventListener('click', async () => {
            urlparams.requestType = 2;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const familyBtn = document.querySelector('.family-btn');
        familyBtn.addEventListener('click', async () => {
            urlparams.requestType = 3;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const businessBtn = document.querySelector('.business-btn');
        businessBtn.addEventListener('click', async () => {
            urlparams.requestType = 1;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const conciergeBtn = document.querySelector('.concierge-btn');
        conciergeBtn.addEventListener('click', async () => {
            urlparams.requestType = 4;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });


        //searchbar
        const searchbar = document.querySelector('.searchbar');
        searchbar.addEventListener('keyup', async () => {
            const searchPattern = searchbar.value;
            console.log(searchPattern);

            if(searchPattern !== ""){
                urlparams.searchPattern = searchPattern;
            }else{
                urlparams.searchPattern = null;

            }
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            console.log(urlparams.searchPattern);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        })


        //selectlist
        const selectList = document.querySelector('.selectlist');

        selectList.addEventListener('change', async () => {
            const regionValue = selectList.value;
            console.log(regionValue);

            if(regionValue == 0){
                urlparams.searchRegion = null;
            }else{
                urlparams.searchRegion = regionValue;
            }
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            console.log(urlparams.searchPattern);
            console.log(urlparams.searchRegion);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        })



        function addEventListnersForPartial(){

            const cancelCaseBtn = document.querySelectorAll('.cancel-case-btn');
            const assignCaseBtn = document.querySelectorAll('.assign-case-btn');
            const blockRequestBtn = document.querySelectorAll('.block-request-btn');
            const clearCaseBtn = document.querySelectorAll('.clear-case-btn');
            const sendAgreementBtn = document.querySelectorAll('.send-agreement-btn');

            if (cancelCaseBtn !== null) {
                cancelCaseBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        console.log(requestId);

                        await GetCancelCaseModalData(requestId);

                        const myModal = new bootstrap.Modal('#cancel-case-modal')
                        myModal.show();
                    });
                });
            }

            if(assignCaseBtn !== null){
                assignCaseBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        const isTransferRequest = event.target.dataset.isTransferRequest;
                        console.log(requestId);
                        console.log(isTransferRequest);

                        await GetAssignCaseModalData(requestId, isTransferRequest);
                    })
                })
            }

            if (blockRequestBtn !== null) {
                blockRequestBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        console.log(requestId);

                        await GetBlockRequestModalData(requestId);

                        const myModal = new bootstrap.Modal('#block-request-modal');
                        myModal.show();
                    });
                });
            }

            if(clearCaseBtn !== null){
                clearCaseBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        console.log(requestId);

                        await GetClearCaseModalData(requestId);

                        const myModal = new bootstrap.Modal('#clear-case-modal');
                        myModal.show();
                    });
                });
            }

            if (sendAgreementBtn !== null) {
                sendAgreementBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        console.log(requestId);

                        await GetSendAgreementModalData(requestId);

                        const myModal = new bootstrap.Modal('#send-agreement-modal');
                        myModal.show();
                    });
                });
            }
        }
        
    </script>

}