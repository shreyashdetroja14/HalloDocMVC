
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_AdminDashboardLayout.cshtml";
}

@section AddStyles{

    <link href="@Url.Content("~/css/admindashboard.css")" rel="stylesheet" type="text/css" />
    
}

@model HalloDocServices.ViewModels.AdminViewModels.AdminDashboardViewModel

<div class="main">

    <partial name="_NavbarLinks" ></partial>

    <div class="container-fluid p-4">
        <div class="row request-status-tabs mb-3">
            <div class="col-12 col-lg-6">
                <div class="row mb-3">
                    <div class="new d-none d-md-block col p-3 me-3 new-req bg-primary bg-opacity-10 text-primary">
                        <div>
                            @*<img src="~/images/newIcon.svg">*@
                            <svg height="200px" width="200px" version="1.1" id="_x32_" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve" fill="currentColor" class="newicon"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <style type="text/css"> .st0{fill:currentColor;} </style> <g> <path class="st0" d="M13.175,203.061c0,0-0.004-0.013-0.007-0.026l-0.672-1.763L13.175,203.061z"></path> <path class="st0" d="M17.239,163.415l11.178-7.3c0.006,0,0.012-0.007,0.019-0.014L17.239,163.415z"></path> <path class="st0" d="M480.364,260.466c-0.549-1.436-0.823-2.951-0.823-4.466c0-1.521,0.274-3.042,0.826-4.492l16.869-44.275 l1.586-4.172c1.74-4.564,2.582-9.324,2.582-14.006c0.006-12.986-6.458-25.516-17.835-32.953l-5.599-3.656l-37.84-24.708 c-2.569-1.684-4.447-4.276-5.25-7.247l-13.548-50.047c-4.675-17.23-20.28-29.075-37.978-29.075c-0.669,0-1.335,0.013-2.004,0.052 L329.766,44v-0.006l-0.774,0.02c-2.896,0-5.687-0.98-7.933-2.788l-37.766-30.42l-2.598-2.089 C273.507,2.912,264.725-0.006,256.002,0c-8.72-0.013-17.504,2.912-24.697,8.717l0.01-0.007L195.11,37.87l-4.159,3.35 c-2.256,1.815-5.057,2.795-7.94,2.795L182.338,44l-51.555-2.572l-0.033-0.007c-0.8-0.046-1.502-0.052-2.102-0.052 c-17.701,0-33.303,11.844-37.978,29.075l-13.549,50.047c-0.806,2.983-2.693,5.582-5.278,7.273l-3.732,2.436l-39.694,25.915 c-11.371,7.444-17.828,19.966-17.822,32.946c0,4.675,0.839,9.415,2.573,13.973l18.465,48.473l0.003,0.006 c0.548,1.437,0.826,2.965,0.826,4.486c0,1.522-0.274,3.043-0.826,4.48l-18.461,48.46l0.003-0.006 c-1.74,4.564-2.583,9.318-2.583,13.999c-0.006,12.987,6.451,25.523,17.838,32.966l32.218,21.038l11.201,7.313 c2.583,1.684,4.463,4.27,5.269,7.26l13.549,50.041c4.671,17.23,20.28,29.075,37.978,29.081c0.6-0.006,1.254-0.013,1.952-0.052 l-1.482,0.078l53.439-2.67h-0.026l0.5-0.007c2.866,0,5.658,0.98,7.91,2.795l40.371,32.522h0.003 c7.185,5.792,15.964,8.71,24.687,8.704c8.72,0.007,17.502-2.912,24.691-8.71l43.841-35.318l-3.467,2.795 c2.253-1.815,5.038-2.788,7.907-2.788l0.6,0.013l52.189,2.605l-0.262-0.012c0.568,0.026,1.186,0.039,1.855,0.045 c17.691-0.006,33.306-11.844,37.978-29.081l13.548-50.041c0.806-2.99,2.684-5.569,5.262-7.254l43.45-28.37 c11.364-7.444,17.818-19.966,17.812-32.947c0-4.682-0.842-9.442-2.586-14.012L480.364,260.466z M455.38,241.988 c-1.72,4.512-2.582,9.265-2.582,14.012c0,4.754,0.862,9.507,2.582,14.019l18.449,48.44l0.003,0.007 c0.565,1.482,0.829,2.984,0.829,4.473c-0.007,4.166-2.063,8.188-5.716,10.571l-43.41,28.344h0.003 c-8.086,5.275-13.95,13.346-16.474,22.67l-13.548,50.04c-1.485,5.524-6.513,9.324-12.16,9.317l-0.751-0.02l-0.189-0.006 l-51.474-2.566h0.036c-0.634-0.039-1.303-0.052-2.004-0.059c-8.968,0-17.685,3.069-24.694,8.717l-3.47,2.801l-36.897,29.721 c-2.324,1.874-5.086,2.788-7.91,2.788c-2.82,0-5.586-0.914-7.913-2.788l-40.368-32.522c-7.006-5.641-15.719-8.71-24.69-8.71 c-0.601,0-1.303,0.007-2.106,0.052v0.007l-51.64,2.579l0.016-0.006l-0.652,0.013c-5.642,0.006-10.676-3.794-12.161-9.317 l-13.548-50.04c-2.524-9.324-8.387-17.394-16.474-22.67l-32.212-21.031l-11.194-7.313c-3.65-2.377-5.713-6.405-5.72-10.578 c0.003-1.496,0.265-2.997,0.826-4.466l18.461-48.454l-0.003,0.007c1.72-4.518,2.582-9.265,2.582-14.019 c0-4.753-0.858-9.506-2.582-14.018L38.848,195.33l-0.679-1.776c-0.565-1.489-0.826-2.997-0.83-4.492 c0.007-4.172,2.067-8.188,5.716-10.564l43.414-28.343l0.007-0.007c8.082-5.288,13.94-13.352,16.464-22.67l13.548-50.047 c1.482-5.517,6.523-9.324,12.161-9.317l0.503,0.006l51.91,2.592l0.056,0.007c0.63,0.026,1.264,0.04,1.894,0.046 c8.968,0,17.688-3.063,24.701-8.704l40.386-32.529c2.321-1.874,5.08-2.782,7.904-2.788c2.821,0,5.583,0.914,7.907,2.788 l-2.602-2.096l42.979,34.618c7.022,5.654,15.752,8.704,24.707,8.704c0.666,0,1.263-0.02,1.792-0.033h-0.14l52.075-2.599h0.035 l0.601-0.013c5.641-0.007,10.678,3.8,12.16,9.317l13.548,50.047c2.524,9.317,8.38,17.381,16.464,22.67l49.018,32.006l-5.602-3.656 c3.653,2.377,5.71,6.392,5.716,10.558c0,1.496-0.264,2.998-0.832,4.492l-20.832,54.683L455.38,241.988z"></path> <path class="st0" d="M196.151,226.298l-13.784,2.709c-0.725,0.15-1.123,0.725-0.979,1.463l10.254,52.175l-0.597,0.124 l-39.528-46.423c-0.653-0.757-1.45-0.986-2.305-0.816l-14.636,2.88c-0.725,0.144-1.123,0.718-0.966,1.455l15.817,80.448 c0.14,0.738,0.725,1.136,1.45,0.992l13.783-2.71c0.725-0.15,1.123-0.731,0.983-1.469l-10.242-52.051l0.61-0.118l39.613,46.28 c0.653,0.757,1.338,0.999,2.318,0.816l14.509-2.86c0.724-0.144,1.122-0.725,0.966-1.463l-15.814-80.454 C197.46,226.54,196.876,226.155,196.151,226.298z"></path> <path class="st0" d="M280.868,279.649l-35.731,7.026c-0.483,0.105-0.78-0.091-0.865-0.581l-3.385-17.192 c-0.102-0.483,0.098-0.77,0.581-0.874l29.757-5.85c0.725-0.144,1.123-0.719,0.983-1.449l-2.546-12.922 c-0.144-0.724-0.728-1.123-1.453-0.986l-29.754,5.857c-0.484,0.091-0.784-0.111-0.881-0.594l-3.232-16.454 c-0.098-0.49,0.101-0.784,0.584-0.875l35.731-7.026c0.725-0.144,1.123-0.725,0.966-1.456l-2.56-13.038 c-0.144-0.738-0.725-1.13-1.453-0.986l-53.152,10.454c-0.741,0.144-1.126,0.725-0.982,1.462l15.817,80.454 c0.156,0.732,0.724,1.123,1.465,0.98l53.152-10.454c0.728-0.144,1.126-0.725,0.97-1.456l-2.563-13.046 C282.178,279.91,281.593,279.506,280.868,279.649z"></path> <path class="st0" d="M377.221,190.694l-15.605,3.068c-0.852,0.164-1.266,0.634-1.224,1.515l-1.221,54.291l-0.258,0.046 l-24.847-49.16c-0.398-0.699-0.983-1.084-1.708-0.94l-10.61,2.083c-0.839,0.17-1.237,0.744-1.338,1.541l-3.911,54.82l-0.242,0.052 l-22.19-49.701c-0.255-0.718-0.839-1.096-1.691-0.927l-15.732,3.082c-0.852,0.17-0.996,0.706-0.725,1.417l37.266,76.23 c0.398,0.685,0.98,1.084,1.708,0.94l12.19-2.403c0.852-0.163,1.25-0.751,1.348-1.528l4.368-54.415l0.242-0.045l24.521,48.728 c0.385,0.685,0.97,1.084,1.822,0.914l12.19-2.403c0.852-0.157,1.365-0.77,1.352-1.535l5.504-84.645 C378.4,190.955,378.073,190.524,377.221,190.694z"></path> </g> </g></svg>
                            <span class="fw-bold">NEW</span>
                        </div>
                        <div class="fs-4 fw-bold">@Model.NewRequestCount</div>
                    </div>
                    <div class="new d-md-none col p-3 me-3 new-req bg-primary bg-opacity-10 text-primary">
                        <div class="text-center">
                            <span class="fw-bold">NEW</span>
                        </div>
                        <div class="fs-4 fw-bold text-center">@Model.NewRequestCount</div>
                    </div>

                    <div class="pending d-none d-md-block col p-3 me-3 pending-req text-info bg-info bg-opacity-10">
                        <div>
                            @*<img src="~/images/pendingIcon.svg" />*@
                            <svg viewBox="0 0 1024 1024" class="icon pendingicon" version="1.1" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M182.99 146.2h585.14v402.29h73.14V73.06H109.84v877.71H512v-73.14H182.99z" fill="currentColor"></path><path d="M256.13 219.34h438.86v73.14H256.13zM256.13 365.63h365.71v73.14H256.13zM256.13 511.91h219.43v73.14H256.13zM731.55 585.06c-100.99 0-182.86 81.87-182.86 182.86s81.87 182.86 182.86 182.86c100.99 0 182.86-81.87 182.86-182.86s-81.86-182.86-182.86-182.86z m0 292.57c-60.5 0-109.71-49.22-109.71-109.71 0-60.5 49.22-109.71 109.71-109.71 60.5 0 109.71 49.22 109.71 109.71 0.01 60.49-49.21 109.71-109.71 109.71z" fill="currentColor"></path><path d="M758.99 692.08h-54.86v87.27l69.39 68.76 38.61-38.96-53.14-52.66z" fill="currentColor"></path></g></svg>
                            <span class="fw-bold">PENDING</span>
                        </div>
                        <div class="fs-4 fw-bold">@Model.PendingRequestCount</div>
                    </div>
                    <div class="pending d-md-none col p-3 me-3 pending-req text-info bg-info bg-opacity-10">
                        <div class="text-center">
                            <span class="fw-bold">PENDING</span>
                        </div>
                        <div class="fs-4 fw-bold text-center">@Model.PendingRequestCount</div>
                    </div>

                    <div class="activee d-none d-md-block col p-3 me-lg-3 active-req text-success bg-success bg-opacity-10" >
                        <div>
                            @*<img src="~/images/activeIcon.svg" />*@
                            <svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="activeicon text-success"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path fill="currentColor" fill-rule="evenodd" d="M3 10a7 7 0 019.307-6.611 1 1 0 00.658-1.889 9 9 0 105.98 7.501 1 1 0 00-1.988.22A7 7 0 113 10zm14.75-5.338a1 1 0 00-1.5-1.324l-6.435 7.28-3.183-2.593a1 1 0 00-1.264 1.55l3.929 3.2a1 1 0 001.38-.113l7.072-8z"></path> </g></svg>
                            <span class="fw-bold">ACTIVE</span>
                        </div>
                        <div class="fs-4 fw-bold">@Model.ActiveRequestCount</div>
                    </div>
                    <div class="activee d-md-none col p-3 active-req text-success bg-success bg-opacity-10">
                        <div class="text-center">
                            <span class="fw-bold">ACTIVE</span>
                        </div>
                        <div class="fs-4 fw-bold text-center">@Model.ActiveRequestCount</div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-6">
                <div class="row mb-3">
                    <div class="conclude d-none d-md-block col p-3 me-3 conclude-req text-danger bg-danger bg-opacity-10">
                        <div>
                            @*<img src="~/images/concludeIcon.svg" />*@
                            <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="concludeicon"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path fill="currentColor" fill-rule="evenodd" d="M572.329319,159.423805 L572.328547,159.424577 L568.225353,153.482367 C567.903341,153.016033 568.023632,152.908729 568.482182,153.225538 L574.341491,157.273698 C574.435816,157.332998 574.525044,157.403724 574.607193,157.485872 C575.195753,158.074433 575.198003,159.02643 574.612216,159.612216 C574.02643,160.198003 573.074433,160.195753 572.485872,159.607193 C572.428023,159.549343 572.375838,159.487983 572.329319,159.423805 Z M567,159 C567,162.865993 570.134007,166 574,166 C577.865993,166 581,162.865993 581,159 C581,155.473528 578.392294,152.556119 575,152.070889 L575,153.496087 C575,153.774391 574.768066,154 574.5,154 C574.223858,154 574,153.784247 574,153.504611 L574,152.752306 L574,151 C578.418278,151 582,154.581722 582,159 C582,163.418278 578.418278,167 574,167 C569.581722,167 566,163.418278 566,159 L567,159 Z" transform="translate(-566 -151)"></path> </g></svg>
                            <span class="fw-bold">CONCLUDE</span>
                        </div>
                        <div class="fs-4 fw-bold">@Model.ConcludeRequestCount</div>
                    </div>
                    <div class="conclude d-md-none col p-3 me-3 conclude-req text-danger bg-danger bg-opacity-10">
                        <div class="text-center">
                            <span class="fw-bold">CONCLUDE</span>
                        </div>
                        <div class="fs-4 fw-bold text-center">@Model.ConcludeRequestCount</div>
                    </div>

                    <div class="to-close d-none d-md-block col p-3 me-3 toclose-req text-toclose bg-toclose">
                        <div>
                            @*<img src="~/images/toCloseIcon.svg" />*@
                            <svg fill="currentColor" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 71.284 71.284" xml:space="preserve" class="tocloseicon"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <rect x="48.76" y="55.174" width="20.969" height="6.709"></rect> <path d="M47.676,48.271c2.381-5.035,14.595-25.571,6.211-39.509C50.535,3.194,44.476,0,37.253,0 c-7.275,0-13.375,3.24-16.735,8.888c-4.79,8.054-3.491,19.741,3.659,32.909c1.519,2.797,1.556,3.814-11.392,6.798 c-5.143,1.188-8.281,3.351-9.878,6.808c-1.59,3.441-1.337,7.025-1.337,15.882h40.723v-6.953H8.508 c-0.002-6.252,0.413-7.711,5.839-8.963c7.411-1.707,14.481-3.224,16.787-8.334c1.143-2.535,0.857-5.414-0.847-8.554 c-5.85-10.771-7.232-20.262-3.795-26.038c2.105-3.541,5.928-5.491,10.761-5.491c4.794,0,8.584,1.915,10.677,5.392 c6.334,10.529-4.922,29.461-6.564,33.008L47.676,48.271z"></path> </g> </g> </g></svg>
                            <span class="fw-bold">TO CLOSE</span>
                        </div>
                        <div class="fs-4 fw-bold">@Model.ToCloseRequestCount</div>
                    </div>
                    <div class="to-close d-md-none col p-3 me-3 toclose-req text-toclose bg-toclose">
                        <div class="text-center">
                            <span class="fw-bold">TO CLOSE</span>
                        </div>
                        <div class="fs-4 fw-bold text-center">@Model.ToCloseRequestCount</div>
                    </div>

                    <div class="unpaid d-none d-md-block col p-3 unpaid-req text-unpaid bg-unpaid">
                        <div>
                            @*<img src="~/images/unpaidIcon.svg" />*@
                            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="unpaidicon"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M9.5 13.75C9.5 14.72 10.25 15.5 11.17 15.5H13.05C13.85 15.5 14.5 14.82 14.5 13.97C14.5 13.06 14.1 12.73 13.51 12.52L10.5 11.47C9.91 11.26 9.51001 10.94 9.51001 10.02C9.51001 9.17999 10.16 8.48999 10.96 8.48999H12.84C13.76 8.48999 14.51 9.26999 14.51 10.24" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M12 7.5V16.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M22 12C22 17.52 17.52 22 12 22C6.48 22 2 17.52 2 12C2 6.48 6.48 2 12 2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M17 3V7H21" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M22 2L17 7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                            <span class="fw-bold">UNPAID</span>
                        </div>
                        <div class="fs-4 fw-bold">@Model.UnpaidRequestCount</div>
                    </div>
                    <div class="unpaid d-md-none col p-3 unpaid-req text-unpaid bg-unpaid">
                        <div class="text-center">
                            <span class="fw-bold">UNPAID</span>
                        </div>
                        <div class="fs-4 fw-bold text-center">@Model.UnpaidRequestCount</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="utility-bar d-flex justify-content-between mb-3">
            <p class="h4">Patients <span>(New)</span></p>
            <div class="utility-buttons">
                <button class="btn btn-info text-white">
                    <img src="~/images/sendIcon.svg" />
                    <span class="d-none d-lg-inline">Send Link</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/documentIcon.svg" />
                    <span class="d-none d-lg-inline">Create Requests</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/exportIcon.svg" />
                    <span class="d-none d-lg-inline">Export</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/exportAllIcon.svg" />
                    <span class="d-none d-lg-inline">Export All</span>
                </button>
                <button class="btn btn-info text-white">
                    <img src="~/images/doctorIconWhite.svg" />
                    <span class="d-none d-lg-inline">Request Support</span>
                </button>
            </div>
        </div>

        <div class="request-table rounded-3">
            <div class="search-filter-bar d-flex flex-column flex-lg-row justify-content-lg-between bg-white p-3">
                <div class="d-flex flex-column flex-md-row">
                    <input type="text" class="form-control searchbar me-2 mb-2" placeholder="&#128269; Search Patient" />
                    <select class="form-select selectlist me-2 mb-2">
                        <option selected disabled>Search by Region</option>
                        <option value="0">All Regions</option>
                        <option value="1">Gujarat</option>
                        <option value="2">Maharashtra</option>
                        <option value="3">Madhya Pradesh</option>
                        <option value="4">Uttar Pradesh</option>
                        <option value="5">Rajasthan</option>
                    </select>
                </div>

                <div class="request-type-buttons d-flex justify-content-end">
                    <button class="all-btn btn border px-3">All</button>
                    <button class="patient-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width:16px; height:16px;"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="#00b33c"></path> </g></svg>
                        <span>Patient</span>
                    </button>
                    <button class="family-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width:16px; height:16px;"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="#ff9933"></path> </g></svg>
                        <span>Family</span>
                     </button>
                    <button class="business-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width:16px; height:16px;"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="#ffb3cc"></path> </g></svg>
                        <span>Business</span>
                    </button>
                    <button class="concierge-btn btn d-flex flex-column align-items-center flex-sm-row">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width:16px; height:16px;"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="#66a3ff"></path> </g></svg>
                        <span>Concierge</span>
                    </button>
                </div>
            </div>
            <div class="requests" id="requests">
                @*<partial name="_RequestTable"></partial>*@
            </div>
        </div>
    </div>
</div>


@section AddScript{
    <script>

        //on body load, call partial view

        document.addEventListener("DOMContentLoaded", async () => {
            const requestStatus = 1;
            await GetPartialViewData(requestStatus);
            console.log("DOM is loaded and ready!");
        });


        // requests partial view data ajax call

        async function GetPartialViewData(requestStatus, requestType = null, searchPattern = null, searchRegion = null){
            try {
                let url = `/AdminDashBoard/FetchRequests?requestStatus=${requestStatus}`;

                if (requestType) {
                    url += `&requestType=${requestType}`;
                }

                if (searchPattern) {
                    url += `&searchPattern=${encodeURIComponent(searchPattern)}`; // Encode for URL safety
                }

                if (searchRegion) {
                    url += `&searchRegion=${encodeURIComponent(searchRegion)}`; // Encode for URL safety
                }

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const partialViewHtml = await response.text();
                const partialViewContainer = document.getElementById('requests');
                partialViewContainer.innerHTML = partialViewHtml;

                addEventListnersForPartial();
                
            } catch (error) {
                console.error('Error fetching partial view:', error);
            }
        }


        // cancel case modal data ajax call

        async function GetCancelCaseModalData(requestId) {

            try {
                let url = `/AdminDashBoard/CancelCase?requestId=${requestId}`;

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const cancelCaseModalHtml = await response.text();
                const modalContainer = document.getElementById('modal-container');
                modalContainer.innerHTML = cancelCaseModalHtml;

            } catch (error) {
                console.error('Error fetching partial view:', error);
                // Handle the error gracefully, e.g., display an error message to the user
            }
        }

        async function GetAssignCaseModalData(requestId, isTransferRequest = null, regionId = 0) {

            try {
                let url = `/AdminDashBoard/AssignCase?requestId=${requestId}&isTransferRequest=${isTransferRequest}&regionId=${regionId}`;

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const assignCaseModalHtml = await response.text();
                const modalContainer = document.getElementById('modal-container');
                modalContainer.innerHTML = assignCaseModalHtml;

                const myModal = new bootstrap.Modal('#assign-case-modal')
                myModal.show();

                const regionSelectList = document.querySelector('.region-select');
                regionSelectList.addEventListener('change', async () => {
                    const regionId = regionSelectList.value;
                    console.log('region value:: ',regionId);
                    console.log('request id:: ', requestId);
                    console.log('transfer req:: ', isTransferRequest);

                    myModal.hide();
                    await GetAssignCaseModalData(requestId, isTransferRequest, regionId);

                });

            } catch (error) {
                console.error('Error fetching partial view:', error);
                // Handle the error gracefully, e.g., display an error message to the user
            }
        }

        async function GetBlockRequestModalData(requestId) {

            try {
                let url = `/AdminDashBoard/BlockRequest?requestId=${requestId}`;

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const blockRequestModalHtml = await response.text();
                const modalContainer = document.getElementById('modal-container');
                modalContainer.innerHTML = blockRequestModalHtml;

            } catch (error) {
                console.error('Error fetching partial view:', error);
                // Handle the error gracefully, e.g., display an error message to the user
            }
        }

        const urlparams = {
            requestStatus: 1,
            requestType: null,
            searchPattern: null,
            searchRegion: null,
        }

        //request status buttons
        
        const newBtns = document.querySelectorAll('.new');

        newBtns.forEach(btn => {
            btn.addEventListener('click',async () => {
                urlparams.requestStatus = 1;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);

            });
        });

        const pendingBtns = document.querySelectorAll('.pending');

        pendingBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                urlparams.requestStatus = 2;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const activeeBtns = document.querySelectorAll('.activee');

        activeeBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                urlparams.requestStatus = 3;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const concludeBtns = document.querySelectorAll('.conclude');

        concludeBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                urlparams.requestStatus = 4;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const toCloseBtns = document.querySelectorAll('.to-close');

        toCloseBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                urlparams.requestStatus = 5;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });

        const unpaidBtns = document.querySelectorAll('.unpaid');

        unpaidBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                urlparams.requestStatus = 6;
                console.log(urlparams.requestStatus);
                await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
            });
        });


        // request type buttons

        const allBtn = document.querySelector('.all-btn');
        allBtn.addEventListener('click', async () => {
            urlparams.requestType = null;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const patientBtn = document.querySelector('.patient-btn');
        patientBtn.addEventListener('click', async () => {
            urlparams.requestType = 2;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const familyBtn = document.querySelector('.family-btn');
        familyBtn.addEventListener('click', async () => {
            urlparams.requestType = 3;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const businessBtn = document.querySelector('.business-btn');
        businessBtn.addEventListener('click', async () => {
            urlparams.requestType = 1;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });

        const conciergeBtn = document.querySelector('.concierge-btn');
        conciergeBtn.addEventListener('click', async () => {
            urlparams.requestType = 4;
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        });


        //searchbar
        const searchbar = document.querySelector('.searchbar');
        searchbar.addEventListener('keyup', async () => {
            const searchPattern = searchbar.value;
            console.log(searchPattern);

            if(searchPattern !== ""){
                urlparams.searchPattern = searchPattern;
            }else{
                urlparams.searchPattern = null;

            }
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            console.log(urlparams.searchPattern);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        })


        //selectlist
        const selectList = document.querySelector('.selectlist');

        selectList.addEventListener('change', async () => {
            const regionValue = selectList.value;
            console.log(regionValue);

            if(regionValue == 0){
                urlparams.searchRegion = null;
            }else{
                urlparams.searchRegion = regionValue;
            }
            console.log(urlparams.requestStatus);
            console.log(urlparams.requestType);
            console.log(urlparams.searchPattern);
            console.log(urlparams.searchRegion);
            await GetPartialViewData(urlparams.requestStatus, urlparams.requestType, urlparams.searchPattern, urlparams.searchRegion);
        })



        function addEventListnersForPartial(){
            const cancelCaseBtn = document.querySelectorAll('.cancel-case-btn');
            const assignCaseBtn = document.querySelectorAll('.assign-case-btn');
            const blockRequestBtn = document.querySelectorAll('.block-request-btn');

            if (cancelCaseBtn !== null) {
                cancelCaseBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        console.log(requestId);

                        await GetCancelCaseModalData(requestId);

                        const myModal = new bootstrap.Modal('#cancel-case-modal')
                        myModal.show();
                    });
                });
            }

            if(assignCaseBtn !== null){
                assignCaseBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        const isTransferRequest = event.target.dataset.isTransferRequest;
                        console.log(requestId);
                        console.log(isTransferRequest);

                        await GetAssignCaseModalData(requestId, isTransferRequest);
                    })
                })
            }

            if (blockRequestBtn !== null) {
                blockRequestBtn.forEach(item => {
                    item.addEventListener('click', async (event) => {
                        const requestId = event.target.dataset.requestId;
                        console.log(requestId);

                        await GetBlockRequestModalData(requestId);

                        const myModal = new bootstrap.Modal('#block-request-modal');
                        myModal.show();
                    });
                });
            }
        }
        
    </script>

}